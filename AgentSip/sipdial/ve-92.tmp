
#include <cstdlib>
#include <fstream>
#include <iostream>
#include "MySipDialer.hxx"

using namespace resip;
using namespace std;

MySipDialer::MySipDialer()
{
}

MySipDialer::~MySipDialer()
{
}

string MySipDialer::getFullFilename()
{
#ifdef WIN32
//	char home_direct[255];
//	GetCurrentDirectory(255,(LPWSTR)home_direct);
   char *home_drive = getenv("HOMEDRIVE");
   assert(home_drive); // FIXME
   char *home_path = getenv("HOMEPATH");
   assert(home_path); // FIXME
   string full_filename(string("N:/resiprocate-1.4/apps/sipdial/sipdial.cfg"));
   return full_filename;
#else   
   char *home_dir = getenv("HOME");
   assert(home_dir); // FIXME
   string full_filename(string(home_dir) + string("/.sipdial/sipdial.cfg"));
   return full_filename;
#endif
}

void MySipDialer::mySipStart() 
{   
   DialerConfiguration *dc = new DialerConfiguration();
   ifstream in(getFullFilename().c_str());
   if(!in.is_open())
      assert(0); // FIXME

   dc->loadStream(in);
   in.close();

   SipStack *mStack = new SipStack();
   DialogUsageManager *mDum = new DialogUsageManager(*mStack);
   mDum->addTransport(UDP, 5060, V4);
   SharedPtr<MasterProfile> masterProfile = SharedPtr<MasterProfile>(new MasterProfile);
   mDum->setMasterProfile(masterProfile);
   auto_ptr<ClientAuthManager> clientAuth(new ClientAuthManager);
   mDum->setClientAuthManager(clientAuth);

   StackThread *stackThread=new StackThread(*mStack);
   DumThread *dumThread = new DumThread(*mDum);
   
   /* Make it all go */
   stackThread->run();
   dumThread->run();

   di=new DialInstance(*dc);
   di->setSipStack(mStack);
   di->setDum(mDum);
   di->execute();

   ri=new RegisterInstance(*dc);
   ri->setSipStack(mStack);
   ri->setDum(mDum);

   ri->execute();

}

